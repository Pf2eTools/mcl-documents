import os
import subprocess
import json

COMMIT_HASH = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('ascii').strip()
REPO_ULR = f"https://raw.githubusercontent.com/Pf2eTools/mcl-documents/{COMMIT_HASH}"


def get_bundled_lua(root):
    bundle_cmd = f'luabundler bundle ../lua/{root} -p "../?.lua"'
    return subprocess.check_output(bundle_cmd, shell=True)


def build_deck_from_dir(directory, back_url=None):
    deck = []
    files = os.listdir(directory)
    for img in files:
        if img.split(".")[-2].endswith("_b"):
            if img.replace("_b.", ".") not in files:
                print(f"WARNING: {img} is missing cardface!")
            continue

        file_type = img.split(".")[-1]
        card = {
            "name": ".".join(img.split(".")[:1]),
            "face": f"{REPO_ULR}/{directory.lstrip('../')}/{img}",
        }
        back_img = img.replace(f".{file_type}", f"_b.{file_type}")
        if back_img in files:
            card["back"] = f"{REPO_ULR}/{directory.lstrip('../')}/{back_img}"
        elif back_url is str:
            card["back"] = back_url
        elif callable(back_url):
            card["back"] = back_url(card)
        deck.append(card)

    return deck


def card_to_lua_str(card):
    out = "{"
    out += ", ".join([f'{k} = "{v}"' for k, v in card.items()])
    out += "}"
    return out


def deck_to_lua_str(deck):
    out = "\n\t{\n\t\t"
    cards = [card_to_lua_str(c) for c in deck]
    out += ",\n\t\t".join(cards)
    out += "\n\t},"
    return out


def build_decks_lua():
    LUA = f"-- THIS FILE WAS GENERATED BY scripts/create-decks.py\n"
    LUA += f"-- ALL MANUAL CHANGES WILL BE LOST THE NEXT TIME THIS FILE IS GENERATED!\n\n"
    LUA += "return {"

    castle_deck = build_deck_from_dir("../assets/castles")
    LUA += deck_to_lua_str(castle_deck)

    def get_siege_back(card):
        if card["name"].startswith("sa"):
            return f"{REPO_ULR}/assets/siege/sa_b.png"
        elif card["name"].startswith("sd"):
            return f"{REPO_ULR}/assets/siege/sd_b.png"
        return None

    siege_deck = build_deck_from_dir("../assets/siege", back_url=get_siege_back)
    LUA += deck_to_lua_str(siege_deck)

    veteran_deck = build_deck_from_dir("../assets/veteran")
    LUA += deck_to_lua_str(veteran_deck)

    warmachine_deck = build_deck_from_dir("../assets/warmachines")
    LUA += deck_to_lua_str(warmachine_deck)

    LUA += "\n}"

    with open("../lua/decks.lua", "w", encoding="utf-8") as lua_file:
        lua_file.write(LUA)


def main():
    build_decks_lua()

    bundle = get_bundled_lua("spawn-decks-button.lua")
    with open("../tts/spawn-decks-button.json", "r", encoding="utf-8") as f:
        save = json.load(f)

    save["ObjectStates"][0]["LuaScript"] = str(bundle, encoding="utf-8")

    with open("../tts/spawn-decks-button.json", "w", encoding="utf-8") as f:
        json.dump(save, f, indent=4)


if __name__ == "__main__":
    main()
